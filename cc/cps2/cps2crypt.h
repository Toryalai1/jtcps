#ifndef __MAME_DECRYPT
#define __MAME_DECRYPT

#include <cstdint>
#include <type_traits>

struct MAME_keys {
    std::uint32_t key[2];
    std::uint32_t upper;
};

struct sbox
{
    const std::uint8_t table[64];
    const int inputs[6];        // positions of the inputs bits, -1 means no input except from key
    const int outputs[2];       // positions of the output bits
};

// the above struct better defines how the hardware works, however
// to speed up the decryption at run time we convert it to the
// following one
struct optimised_sbox
{
    std::uint8_t input_lookup[256];
    std::uint8_t output[64];
};

int init_cps2crypt(char *m_key, MAME_keys& keys);
void cps2_decrypt( std::uint16_t *rom, std::uint16_t *dec, int length,
    const std::uint32_t *master_key, std::uint32_t lower_limit, std::uint32_t upper_limit);

void optimise_sboxes(struct optimised_sbox* out, const struct sbox* in);
// from ./lib/util/coretmpl.h

void expand_1st_key(uint32_t *dstkey, const uint32_t *srckey);
void expand_2nd_key(uint32_t *dstkey, const uint32_t *srckey);
void expand_subkey(uint32_t* subkey, uint16_t seed);

uint16_t feistel(uint16_t val, const int *bitsA, const int *bitsB,
        const struct optimised_sbox* boxes1, const struct optimised_sbox* boxes2, const struct optimised_sbox* boxes3, const struct optimised_sbox* boxes4,
        uint32_t key1, uint32_t key2, uint32_t key3, uint32_t key4);

template <typename T, typename U> constexpr T make_bitmask(U n)
{
        return T((n < (8 * sizeof(T)) ? (std::make_unsigned_t<T>(1) << n) : std::make_unsigned_t<T>(0))
- 1);
}

template <typename T, typename U> constexpr T BIT(T x, U n) noexcept { return (x >> n) & T(1); }
template <typename T, typename U, typename V> constexpr T BIT(T x, U n, V w)
{
        return (x >> n) & make_bitmask<T>(w);
}
template <typename T, typename U> constexpr T bitswap(T val, U b) noexcept { return BIT(val, b) << 0U; }

template <typename T, typename U, typename... V> constexpr T bitswap(T val, U b, V... c) noexcept
{
        return (BIT(val, b) << sizeof...(c)) | bitswap(val, c...);
}

template <unsigned B, typename T, typename... U> T bitswap(T val, U... b) noexcept
{
        static_assert(sizeof...(b) == B, "wrong number of bits");
        static_assert((sizeof(std::remove_reference_t<T>) * 8) >= B, "return type too small for result");
        return bitswap(val, b...);
}

const int fn1_groupA[8] = { 10, 4, 6, 7, 2, 13, 15, 14 };
const int fn1_groupB[8] = {  0, 1, 3, 5, 8,  9, 11, 12 };

const int fn2_groupA[8] = { 6, 0, 2, 13, 1,  4, 14,  7 };
const int fn2_groupB[8] = { 3, 5, 9, 10, 8, 15, 12, 11 };

/******************************************************************************/

const struct sbox fn1_r1_boxes[4] =
{
    {   // subkey bits  0- 5
        {
            0,2,2,0,1,0,1,1,3,2,0,3,0,3,1,2,1,1,1,2,1,3,2,2,2,3,3,2,1,1,1,2,
            2,2,0,0,3,1,3,1,1,1,3,0,0,1,0,0,1,2,2,1,2,3,2,2,2,3,1,3,2,0,1,3,
        },
        { 3, 4, 5, 6, -1, -1 },
        { 3, 6 }
    },
    {   // subkey bits  6-11
        {
            3,0,2,2,2,1,1,1,1,2,1,0,0,0,2,3,2,3,1,3,0,0,0,2,1,2,2,3,0,3,3,3,
            0,1,3,2,3,3,3,1,1,1,1,2,0,1,2,1,3,2,3,1,1,3,2,2,2,3,1,3,2,3,0,0,
        },
        { 0, 1, 2, 4, 7, -1 },
        { 2, 7 }
    },
    {   // subkey bits 12-17
        {
            3,0,3,1,1,0,2,2,3,1,2,0,3,3,2,3,0,1,0,1,2,3,0,2,0,2,0,1,0,0,1,0,
            2,3,1,2,1,0,2,0,2,1,0,1,0,2,1,0,3,1,2,3,1,3,1,1,1,2,0,2,2,0,0,0,
        },
        { 0, 1, 2, 3, 6, 7 },
        { 0, 1 }
    },
    {   // subkey bits 18-23
        {
            3,2,0,3,0,2,2,1,1,2,3,2,1,3,2,1,2,2,1,3,3,2,1,0,1,0,1,3,0,0,0,2,
            2,1,0,1,0,1,0,1,3,1,1,2,2,3,2,0,3,3,2,0,2,1,3,3,0,0,3,0,1,1,3,3,
        },
        { 0, 1, 3, 5, 6, 7 },
        { 4, 5 }
    },
};

const struct sbox fn1_r2_boxes[4] =
{
    {   // subkey bits 24-29
        {
            3,3,2,0,3,0,3,1,0,3,0,1,0,2,1,3,1,3,0,3,3,1,3,3,3,2,3,2,2,3,1,2,
            0,2,2,1,0,1,2,0,3,3,0,1,3,2,1,2,3,0,1,3,0,1,2,2,1,2,1,2,0,1,3,0,
        },
        { 0, 1, 2, 3, 6, -1 },
        { 1, 6 }
    },
    {   // subkey bits 30-35
        {
            1,2,3,2,1,3,0,1,1,0,2,0,0,2,3,2,3,3,0,1,2,2,1,0,1,0,1,2,3,2,1,3,
            2,2,2,0,1,0,2,3,2,1,2,1,2,1,0,3,0,1,2,3,1,2,1,3,2,0,3,2,3,0,2,0,
        },
        { 2, 4, 5, 6, 7, -1 },
        { 5, 7 }
    },
    {   // subkey bits 36-41
        {
            0,1,0,2,1,1,0,1,0,2,2,2,1,3,0,0,1,1,3,1,2,2,2,3,1,0,3,3,3,2,2,2,
            1,1,3,0,3,1,3,0,1,3,3,2,1,1,0,0,1,2,2,2,1,1,1,2,2,0,0,3,2,3,1,3,
        },
        { 1, 2, 3, 4, 5, 7 },
        { 0, 3 }
    },
    {   // subkey bits 42-47
        {
            2,1,0,3,3,3,2,0,1,2,1,1,1,0,3,1,1,3,3,0,1,2,1,0,0,0,3,0,3,0,3,0,
            1,3,3,3,0,3,2,0,2,1,2,2,2,1,1,3,0,1,0,1,0,1,1,1,1,3,1,0,1,2,3,3,
        },
        { 0, 1, 3, 4, 6, 7 },
        { 2, 4 }
    },
};

const struct sbox fn1_r3_boxes[4] =
{
    {   // subkey bits 48-53
        {
            0,0,0,3,3,1,1,0,2,0,2,0,0,0,3,2,0,1,2,3,2,2,1,0,3,0,0,0,0,0,2,3,
            3,0,0,1,1,2,3,3,0,1,3,2,0,1,3,3,2,0,0,1,0,2,0,0,0,3,1,3,3,3,3,3,
        },
        { 0, 1, 5, 6, 7, -1 },
        { 0, 5 }
    },
    {   // subkey bits 54-59
        {
            2,3,2,3,0,2,3,0,2,2,3,0,3,2,0,2,1,0,2,3,1,1,1,0,0,1,0,2,1,2,2,1,
            3,0,2,1,2,3,3,0,3,2,3,1,0,2,1,0,1,2,2,3,0,2,1,3,1,3,0,2,1,1,1,3,
        },
        { 2, 3, 4, 6, 7, -1 },
        { 6, 7 }
    },
    {   // subkey bits 60-65
        {
            3,0,2,1,1,3,1,2,2,1,2,2,2,0,0,1,2,3,1,0,2,0,0,2,3,1,2,0,0,0,3,0,
            2,1,1,2,0,0,1,2,3,1,1,2,0,1,3,0,3,1,1,0,0,2,3,0,0,0,0,3,2,0,0,0,
        },
        { 0, 2, 3, 4, 5, 6 },
        { 1, 4 }
    },
    {   // subkey bits 66-71
        {
            0,1,0,0,2,1,3,2,3,3,2,1,0,1,1,1,1,1,0,3,3,1,1,0,0,2,2,1,0,3,3,2,
            1,3,3,0,3,0,2,1,1,2,3,2,2,2,1,0,0,3,3,3,2,2,3,1,0,2,3,0,3,1,1,0,
        },
        { 0, 1, 2, 3, 5, 7 },
        { 2, 3 }
    },
};

const struct sbox fn1_r4_boxes[4] =
{
    {   // subkey bits 72-77
        {
            1,1,1,1,1,0,1,3,3,2,3,0,1,2,0,2,3,3,0,1,2,1,2,3,0,3,2,3,2,0,1,2,
            0,1,0,3,2,1,3,2,3,1,2,3,2,0,1,2,2,0,0,0,2,1,3,0,3,1,3,0,1,3,3,0,
        },
        { 1, 2, 3, 4, 5, 7 },
        { 0, 4 }
    },
    {   // subkey bits 78-83
        {
            3,0,0,0,0,1,0,2,3,3,1,3,0,3,1,2,2,2,3,1,0,0,2,0,1,0,2,2,3,3,0,0,
            1,1,3,0,2,3,0,3,0,3,0,2,0,2,0,1,0,3,0,1,3,1,1,0,0,1,3,3,2,2,1,0,
        },
        { 0, 1, 2, 3, 5, 6 },
        { 1, 3 }
    },
    {   // subkey bits 84-89
        {
            0,1,1,2,0,1,3,1,2,0,3,2,0,0,3,0,3,0,1,2,2,3,3,2,3,2,0,1,0,0,1,0,
            3,0,2,3,0,2,2,2,1,1,0,2,2,0,0,1,2,1,1,1,2,3,0,3,1,2,3,3,1,1,3,0,
        },
        { 0, 2, 4, 5, 6, 7 },
        { 2, 6 }
    },
    {   // subkey bits 90-95
        {
            0,1,2,2,0,1,0,3,2,2,1,1,3,2,0,2,0,1,3,3,0,2,2,3,3,2,0,0,2,1,3,3,
            1,1,1,3,1,2,1,1,0,3,3,2,3,2,3,0,3,1,0,0,3,0,0,0,2,2,2,1,2,3,0,0,
        },
        { 0, 1, 3, 4, 6, 7 },
        { 5, 7 }
    },
};

/******************************************************************************/

const struct sbox fn2_r1_boxes[4] =
{
    {   // subkey bits  0- 5
        {
            2,0,2,0,3,0,0,3,1,1,0,1,3,2,0,1,2,0,1,2,0,2,0,2,2,2,3,0,2,1,3,0,
            0,1,0,1,2,2,3,3,0,3,0,2,3,0,1,2,1,1,0,2,0,3,1,1,2,2,1,3,1,1,3,1,
        },
        { 0, 3, 4, 5, 7, -1 },
        { 6, 7 }
    },
    {   // subkey bits  6-11
        {
            1,1,0,3,0,2,0,1,3,0,2,0,1,1,0,0,1,3,2,2,0,2,2,2,2,0,1,3,3,3,1,1,
            1,3,1,3,2,2,2,2,2,2,0,1,0,1,1,2,3,1,1,2,0,3,3,3,2,2,3,1,1,1,3,0,
        },
        { 1, 2, 3, 4, 6, -1 },
        { 3, 5 }
    },
    {   // subkey bits 12-17
        {
            1,0,2,2,3,3,3,3,1,2,2,1,0,1,2,1,1,2,3,1,2,0,0,1,2,3,1,2,0,0,0,2,
            2,0,1,1,0,0,2,0,0,0,2,3,2,3,0,1,3,0,0,0,2,3,2,0,1,3,2,1,3,1,1,3,
        },
        { 1, 2, 4, 5, 6, 7 },
        { 1, 4 }
    },
    {   // subkey bits 18-23
        {
            1,3,3,0,3,2,3,1,3,2,1,1,3,3,2,1,2,3,0,3,1,0,0,2,3,0,0,0,3,3,0,1,
            2,3,0,0,0,1,2,1,3,0,0,1,0,2,2,2,3,3,1,2,1,3,0,0,0,3,0,1,3,2,2,0,
        },
        { 0, 2, 3, 5, 6, 7 },
        { 0, 2 }
    },
};

const struct sbox fn2_r2_boxes[4] =
{
    {   // subkey bits 24-29
        {
            3,1,3,0,3,0,3,1,3,0,0,1,1,3,0,3,1,1,0,1,2,3,2,3,3,1,2,2,2,0,2,3,
            2,2,2,1,1,3,3,0,3,1,2,1,1,1,0,2,0,3,3,0,0,2,0,0,1,1,2,1,2,1,1,0,
        },
        { 0, 2, 4, 6, -1, -1 },
        { 4, 6 }
    },
    {   // subkey bits 30-35
        {
            0,3,0,3,3,2,1,2,3,1,1,1,2,0,2,3,0,3,1,2,2,1,3,3,3,2,1,2,2,0,1,0,
            2,3,0,1,2,0,1,1,2,0,2,1,2,0,2,3,3,1,0,2,3,3,0,3,1,1,3,0,0,1,2,0,
        },
        { 1, 3, 4, 5, 6, 7 },
        { 0, 3 }
    },
    {   // subkey bits 36-41
        {
            0,0,2,1,3,2,1,0,1,2,2,2,1,1,0,3,1,2,2,3,2,1,1,0,3,0,0,1,1,2,3,1,
            3,3,2,2,1,0,1,1,1,2,0,1,2,3,0,3,3,0,3,2,2,0,2,2,1,2,3,2,1,0,2,1,
        },
        { 0, 1, 3, 4, 5, 7 },
        { 1, 7 }
    },
    {   // subkey bits 42-47
        {
            0,2,1,2,0,2,2,0,1,3,2,0,3,2,3,0,3,3,2,3,1,2,3,1,2,2,0,0,2,2,1,2,
            2,3,3,3,1,1,0,0,0,3,2,0,3,2,3,1,1,1,1,0,1,0,1,3,0,0,1,2,2,3,2,0,
        },
        { 1, 2, 3, 5, 6, 7 },
        { 2, 5 }
    },
};

const struct sbox fn2_r3_boxes[4] =
{
    {   // subkey bits 48-53
        {
            2,1,2,1,2,3,1,3,2,2,1,3,3,0,0,1,0,2,0,3,3,1,0,0,1,1,0,2,3,2,1,2,
            1,1,2,1,1,3,2,2,0,2,2,3,3,3,2,0,0,0,0,0,3,3,3,0,1,2,1,0,2,3,3,1,
        },
        { 2, 3, 4, 6, -1, -1 },
        { 3, 5 }
    },
    {   // subkey bits 54-59
        {
            3,2,3,3,1,0,3,0,2,0,1,1,1,0,3,0,3,1,3,1,0,1,2,3,2,2,3,2,0,1,1,2,
            3,0,0,2,1,0,0,2,2,0,1,0,0,2,0,0,1,3,1,3,2,0,3,3,1,0,2,2,2,3,0,0,
        },
        { 0, 1, 3, 5, 7, -1 },
        { 0, 2 }
    },
    {   // subkey bits 60-65
        {
            2,2,1,0,2,3,3,0,0,0,1,3,1,2,3,2,2,3,1,3,0,3,0,3,3,2,2,1,0,0,0,2,
            1,2,2,2,0,0,1,2,0,1,3,0,2,3,2,1,3,2,2,2,3,1,3,0,2,0,2,1,0,3,3,1,
        },
        { 0, 1, 2, 3, 5, 7 },
        { 1, 6 }
    },
    {   // subkey bits 66-71
        {
            1,2,3,2,0,2,1,3,3,1,0,1,1,2,2,0,0,1,1,1,2,1,1,2,0,1,3,3,1,1,1,2,
            3,3,1,0,2,1,1,1,2,1,0,0,2,2,3,2,3,2,2,0,2,2,3,3,0,2,3,0,2,2,1,1,
        },
        { 0, 2, 4, 5, 6, 7 },
        { 4, 7 }
    },
};

const struct sbox fn2_r4_boxes[4] =
{
    {   // subkey bits 72-77
        {
            2,0,1,1,2,1,3,3,1,1,1,2,0,1,0,2,0,1,2,0,2,3,0,2,3,3,2,2,3,2,0,1,
            3,0,2,0,2,3,1,3,2,0,0,1,1,2,3,1,1,1,0,1,2,0,3,3,1,1,1,3,3,1,1,0,
        },
        { 0, 1, 3, 6, 7, -1 },
        { 0, 3 }
    },
    {   // subkey bits 78-83
        {
            1,2,2,1,0,3,3,1,0,2,2,2,1,0,1,0,1,1,0,1,0,2,1,0,2,1,0,2,3,2,3,3,
            2,2,1,2,2,3,1,3,3,3,0,1,0,1,3,0,0,0,1,2,0,3,3,2,3,2,1,3,2,1,0,2,
        },
        { 0, 1, 2, 4, 5, 6 },
        { 4, 7 }
    },
    {   // subkey bits 84-89
        {
            2,3,2,1,3,2,3,0,0,2,1,1,0,0,3,2,3,1,0,1,2,2,2,1,3,2,2,1,0,2,1,2,
            0,3,1,0,0,3,1,1,3,3,2,0,1,0,1,3,0,0,1,2,1,2,3,2,1,0,0,3,2,1,1,3,
        },
        { 0, 2, 3, 4, 5, 7 },
        { 1, 2 }
    },
    {   // subkey bits 90-95
        {
            2,0,0,3,2,2,2,1,3,3,1,1,2,0,0,3,1,0,3,2,1,0,2,0,3,2,2,3,2,0,3,0,
            1,3,0,2,2,1,3,3,0,1,0,3,1,1,3,2,0,3,0,2,3,2,1,3,2,3,0,0,1,3,2,1,
        },
        { 2, 3, 4, 5, 6, 7 },
        { 5, 6 }
    },
};

#endif